Index: src/main/java/hoyocon/bomberman/Object/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hoyocon.bomberman.Object;\r\n\r\nimport hoyocon.bomberman.EntitiesState.State;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.geometry.Bounds;\r\n\r\nimport com.almasb.fxgl.entity.component.Component;\r\nimport com.almasb.fxgl.texture.AnimatedTexture;\r\nimport com.almasb.fxgl.texture.AnimationChannel;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n\r\npublic class Player extends Component {\r\n    // Vị trí người chơi\r\n    private int x, y;\r\n    \r\n    // Thuộc tính người chơi\r\n    private int lives;\r\n    private double speed;\r\n    private int bombCount;\r\n    private int maxBombs;\r\n    private boolean canPlaceBomb;\r\n    \r\n    // Trạng thái người chơi\r\n    private State state;\r\n    private State lastAni;\r\n    \r\n    // Hình ảnh và animation\r\n    private AnimatedTexture texture;\r\n\r\n    private AnimationChannel walkup;\r\n    private AnimationChannel walkdown;\r\n    private AnimationChannel walkleft;\r\n    private AnimationChannel walkright;\r\n\r\n    private AnimationChannel idledown;\r\n\r\n    // Buff logic\r\n    private boolean unlimitedBomb = false;\r\n    private int flameRange = 1;\r\n    private double baseSpeed = 200;\r\n\r\n    public Bounds getBounds() {\r\n        return entity.getViewComponent().getParent().getBoundsInParent();\r\n    }\r\n\r\n    // Buff timers\r\n    private Map<String, Long> activeBuffs = new HashMap<>();\r\n    private static final long BUFF_DURATION = 10; // 10 seconds\r\n    \r\n    public Player() {\r\n        this.lives = 3;\r\n        this.speed = baseSpeed;\r\n        this.bombCount = 0;\r\n        this.maxBombs = 1;\r\n        this.canPlaceBomb = true;\r\n        this.state = State.IDLE;\r\n        this.lastAni = State.IDLE;\r\n        \r\n        Image upImage = new Image(getClass().getResourceAsStream(\"/assets/textures/player_up.png\"));\r\n        Image downImage = new Image(getClass().getResourceAsStream(\"/assets/textures/player_down.png\"));\r\n        Image leftImage = new Image(getClass().getResourceAsStream(\"/assets/textures/player_left.png\"));\r\n        Image rightImage = new Image(getClass().getResourceAsStream(\"/assets/textures/player_right.png\"));\r\n        Image idleImage = new Image(getClass().getResourceAsStream(\"/assets/textures/player_down.png\"));\r\n        \r\n        walkup = new AnimationChannel(upImage, 3, 45, 45, Duration.seconds(0.5), 0, 2);\r\n        walkdown = new AnimationChannel(downImage, 3, 45, 45, Duration.seconds(0.5), 0, 2);\r\n        walkleft = new AnimationChannel(leftImage, 3, 45, 45, Duration.seconds(0.5), 0, 2);\r\n        walkright = new AnimationChannel(rightImage, 3, 45, 45, Duration.seconds(0.5), 0, 2);\r\n        idledown = new AnimationChannel(idleImage, 3, 45, 45, Duration.seconds(1), 0, 0);\r\n        \r\n        texture = new AnimatedTexture(idledown);\r\n    }\r\n    \r\n    @Override\r\n    public void onAdded() {\r\n        entity.getViewComponent().addChild(texture);\r\n    }\r\n    \r\n    @Override\r\n    public void onUpdate(double tpf) {\r\n        updateAnimation();\r\n        updateBuffs();\r\n    }\r\n    \r\n    private void updateAnimation() {\r\n        switch (state) {\r\n            case UP:\r\n                texture.loopNoOverride(walkup);\r\n                break;\r\n            case RIGHT:\r\n                texture.loopNoOverride(walkright);\r\n                break;\r\n            case DOWN, IDLE:\r\n                texture.loopNoOverride(walkdown);\r\n                break;\r\n            case LEFT:\r\n                texture.loopNoOverride(walkleft);\r\n                break;\r\n        }\r\n    }\r\n    private void updateBuffs() {\r\n        long currentTime = System.currentTimeMillis();\r\n        activeBuffs.entrySet().removeIf(entry -> currentTime - entry.getValue() > BUFF_DURATION);\r\n    }\r\n    \r\n    // Di chuyển\r\n    public void moveUp(double tpf) {\r\n        setState(State.UP);\r\n        entity.translateY(-speed * tpf);\r\n    }\r\n    \r\n    public void moveDown(double tpf) {\r\n        setState(State.DOWN);\r\n        entity.translateY(speed * tpf);\r\n    }\r\n    \r\n    public void moveLeft(double tpf) {\r\n        setState(State.LEFT);\r\n        entity.translateX(-speed * tpf);\r\n    }\r\n    \r\n    public void moveRight(double tpf) {\r\n        setState(State.RIGHT);\r\n        entity.translateX(speed * tpf);\r\n    }\r\n    \r\n    public void stop() {\r\n        setState(State.IDLE);\r\n    }\r\n    \r\n    // Đặt bom\r\n    public boolean placeBomb() {\r\n        if ((bombCount < maxBombs || unlimitedBomb) && canPlaceBomb) {\r\n            bombCount++;\r\n            // Logic cho việc tạo bom ở vị trí hiện tại của player\r\n            // Có thể gửi event hoặc gọi factory để tạo bom\r\n            \r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // Xử lý khi bom nổ\r\n    public void bombExploded() {\r\n        if (bombCount > 0) {\r\n            bombCount--;\r\n        }\r\n    }\r\n    \r\n    // Xử lý khi bị thương\r\n    public boolean hit() {\r\n        lives--;\r\n        return lives <= 0;\r\n    }\r\n\r\n    // Buff logic\r\n    public void setUnlimitedBomb(boolean value) {\r\n        unlimitedBomb = value;\r\n        if (value) {\r\n            activeBuffs.put(\"unlimitedBomb\", System.currentTimeMillis());\r\n        }\r\n    }\r\n\r\n    public boolean isUnlimitedBomb() {\r\n        return unlimitedBomb;\r\n    }\r\n\r\n    public void increaseFlameRange(int delta) {\r\n        flameRange += delta;\r\n        if (flameRange < 1) flameRange = 1;\r\n        activeBuffs.put(\"flameRange\", System.currentTimeMillis());\r\n    }\r\n\r\n    public void increaseSpeed(int delta) {\r\n        speed = baseSpeed + delta * 50;\r\n        activeBuffs.put(\"speed\", System.currentTimeMillis());\r\n    }\r\n\r\n    // Logic khi nhặt vật phẩm\r\n    public void pickUpItem(String itemType) {\r\n        switch (itemType) {\r\n            case \"speed\":\r\n                increaseSpeed(1);\r\n                break;\r\n            case \"flameRange\":\r\n                increaseFlameRange(1);\r\n                break;\r\n            case \"unlimitedBomb\":\r\n                setUnlimitedBomb(true);\r\n                break;\r\n            default:\r\n                System.out.println(\"Unknown item type: \" + itemType);\r\n        }\r\n    }\r\n\r\n\r\n    // Getters và Setters\r\n    public State getState() {\r\n        return state;\r\n    }\r\n    \r\n    public void setState(State state) {\r\n        this.state = state;\r\n    }\r\n    \r\n    public double getSpeed() {\r\n        return speed;\r\n    }\r\n    \r\n    public void setSpeed(double speed) {\r\n        this.speed = speed;\r\n    }\r\n    \r\n    public int getLives() {\r\n        return lives;\r\n    }\r\n    \r\n    public void setLives(int lives) {\r\n        this.lives = lives;\r\n    }\r\n    \r\n    public int getMaxBombs() {\r\n        return maxBombs;\r\n    }\r\n    \r\n    public void setMaxBombs(int maxBombs) {\r\n        this.maxBombs = maxBombs;\r\n    }\r\n    \r\n    public boolean isCanPlaceBomb() {\r\n        return canPlaceBomb;\r\n    }\r\n    \r\n    public void setCanPlaceBomb(boolean canPlaceBomb) {\r\n        this.canPlaceBomb = canPlaceBomb;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hoyocon/bomberman/Object/Player.java b/src/main/java/hoyocon/bomberman/Object/Player.java
--- a/src/main/java/hoyocon/bomberman/Object/Player.java	(revision bfffdcc5c91af0d08c2f3227a2bbee7f733f49e3)
+++ b/src/main/java/hoyocon/bomberman/Object/Player.java	(date 1745682181476)
@@ -1,5 +1,6 @@
 package hoyocon.bomberman.Object;
 
+import com.almasb.fxgl.entity.Entity;
 import hoyocon.bomberman.EntitiesState.State;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
@@ -137,9 +138,17 @@
     public boolean placeBomb() {
         if ((bombCount < maxBombs || unlimitedBomb) && canPlaceBomb) {
             bombCount++;
-            // Logic cho việc tạo bom ở vị trí hiện tại của player
-            // Có thể gửi event hoặc gọi factory để tạo bom
-            
+
+            // Tạo bom tại vị trí hiện tại của người chơi
+            Bomb bomb = new Bomb();
+            Entity bombEntity = bomb.createEntity(entity.getX(), entity.getY());
+            entity.getWorld().addEntity(bombEntity);
+
+            System.out.println("Bomb placed at: " + entity.getX() + ", " + entity.getY());
+
+            // Hẹn giờ để bom nổ sau 3 giây
+            com.almasb.fxgl.dsl.FXGL.runOnce(bomb::explode, Duration.seconds(3));
+
             return true;
         }
         return false;
Index: src/main/java/hoyocon/bomberman/Object/Bomb.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/hoyocon/bomberman/Object/Bomb.java b/src/main/java/hoyocon/bomberman/Object/Bomb.java
new file mode 100644
--- /dev/null	(date 1745681935713)
+++ b/src/main/java/hoyocon/bomberman/Object/Bomb.java	(date 1745681935713)
@@ -0,0 +1,39 @@
+package hoyocon.bomberman.Object;
+
+import com.almasb.fxgl.entity.Entity;
+import com.almasb.fxgl.entity.component.Component;
+import com.almasb.fxgl.texture.AnimatedTexture;
+import com.almasb.fxgl.texture.AnimationChannel;
+import javafx.scene.image.Image;
+import javafx.util.Duration;
+
+public class Bomb extends Component {
+    private AnimatedTexture texture;
+    private AnimationChannel bombAnimation;
+
+    public Bomb() {
+        // Tải ảnh bomb.png và tạo AnimationChannel
+        Image bombImage = new Image(getClass().getResourceAsStream("/assets/textures/bomb.png"));
+        bombAnimation = new AnimationChannel(bombImage, 3, 48, 48, Duration.seconds(1), 0, 2);
+        texture = new AnimatedTexture(bombAnimation);
+    }
+
+    @Override
+    public void onAdded() {
+        System.out.println("Bomb added to world");
+        entity.getViewComponent().addChild(texture);
+        texture.play();
+    }
+
+    public Entity createEntity(double x, double y) {
+        Entity bombEntity = new Entity();
+        bombEntity.addComponent(this);
+        bombEntity.setPosition(x, y);
+        return bombEntity;
+    }
+
+    public void explode() {
+        // Logic xử lý khi bom nổ (có thể thêm Animation nổ ở đây)
+        entity.removeFromWorld(); // Xóa bom khỏi thế giới
+    }
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_23\" default=\"true\" project-jdk-name=\"openjdk-23\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision bfffdcc5c91af0d08c2f3227a2bbee7f733f49e3)
+++ b/.idea/misc.xml	(date 1745681163969)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_24" default="true" project-jdk-name="openjdk-23" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
